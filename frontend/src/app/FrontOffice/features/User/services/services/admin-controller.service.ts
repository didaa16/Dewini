/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext, HttpHeaders} from '@angular/common/http';
import { Injectable } from '@angular/core';
import {catchError, Observable, throwError} from 'rxjs';
import { map, tap } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { banUser } from '../fn/admin-controller/ban-user';
import { BanUser$Params } from '../fn/admin-controller/ban-user';
import { deleteUser } from '../fn/admin-controller/delete-user';
import { DeleteUser$Params } from '../fn/admin-controller/delete-user';
import { getAllUsers } from '../fn/admin-controller/get-all-users';
import { GetAllUsers$Params } from '../fn/admin-controller/get-all-users';
import { requestUnban } from '../fn/admin-controller/request-unban';
import { RequestUnban$Params } from '../fn/admin-controller/request-unban';
import { unbanUser } from '../fn/admin-controller/unban-user';
import { UnbanUser$Params } from '../fn/admin-controller/unban-user';
import { User } from '../models/user';
import { environment } from 'src/environments/environment.prod';
import { Router } from '@angular/router';
import { AuthenticationService } from './authentication.service';
import { ExtendedUser } from 'src/app/BackOffice/features/User/user-list/user-list.component';

@Injectable({ providedIn: 'root' })
export class AdminControllerService extends BaseService {
  constructor(
    config: ApiConfiguration,
    http: HttpClient,
    private router: Router,
    private authService: AuthenticationService
  ) {
    super(config, http);
  }

  unbanUser(params: { id: number }): Observable<string> {
    const token = localStorage.getItem('token');
    if (!token) {
      return throwError(() => new Error('Token non trouvé'));
    }

    return this.http.put<string>(
      `${this.rootUrl}/admin/unban/${params.id}`,
      null,
      {
        headers: new HttpHeaders({
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }),
        responseType: 'text' as 'json'
      }
    ).pipe(
      catchError(error => {
        console.error('Erreur lors du débanissement:', error);
        return throwError(() => error);
      })
    );
  }

  banUser(params: { id: number }): Observable<string> {
    const token = localStorage.getItem('token');
    console.log('Banning user ID:', params.id);
    console.log('Using token:', token);

    if (!token) {
      console.error('No token found');
      return throwError(() => new Error('Token non trouvé'));
    }

    return this.http.put<string>(
      `${environment.apiBaseUrl}/admin/ban/${params.id}`,
      null,
      {
        headers: new HttpHeaders({
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }),
        responseType: 'text' as 'json'
      }
    ).pipe(
      tap(response => console.log('Ban response:', response)),
      catchError(error => {
        console.error('Ban error:', error);
        return throwError(() => error);
      })
    );
  }
  updateUser(updateData: any): Observable<User> {
    const token = localStorage.getItem('token');
    if (!token) {
      return throwError(() => new Error('No token found'));
    }

    return this.http.put<User>(
      `${this.rootUrl}/admin/${updateData.id}`,
      updateData,
      {
        headers: new HttpHeaders({
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        })
      }
    ).pipe(
      catchError(error => {
        console.error('Update error:', error);
        return throwError(() => error);
      })
    );
  }

  requestUnban(email: string): Observable<string> {
    const token = localStorage.getItem('token');
    if (!token) {
      return throwError(() => new Error('Token non trouvé'));
    }

    return this.http.post<string>(
      `${this.rootUrl}/admin/request-unban`,
      { email },
      {
        headers: new HttpHeaders({
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }),
        params: { email }
      }
    ).pipe(
      catchError(error => {
        console.error('Erreur demande débanissement:', error);
        return throwError(() => error);
      })
    );
  }

  getAllUsers(): Observable<ExtendedUser[]> {
    const token = localStorage.getItem('token');
    if (!token) {
      console.error('No token found, redirecting to login');
      this.authService.logout();
      this.router.navigate(['/login']);
      return throwError(() => new Error('No token found'));
    }
  
    // Debug token
    console.log('Token used for getAllUsers:', token);
    try {
      const decodedToken = JSON.parse(atob(token.split('.')[1]));
      console.log('Decoded token payload:', decodedToken);
    } catch (e) {
      console.error('Error decoding token:', e);
    }
  
    return this.http.get<ExtendedUser[]>(`${this.rootUrl}/admin/list_user`, {
      headers: new HttpHeaders({
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      })
    }).pipe(
      tap(users => console.log('Users fetched:', users)),
      catchError(error => {
        console.error('Error fetching users:', error);
        if (error.status === 401 || error.status === 403) {
          this.authService.logout();
          this.router.navigate(['/login'], { queryParams: { error: 'session_expired' } });
        }
        return throwError(() => error);
      })
    );
  }

  deleteUser(params: { id: number }): Observable<string> {
    const token = localStorage.getItem('token');
    if (!token) {
      return throwError(() => new Error('Token non trouvé'));
    }

    return this.http.delete<string>(
      `${this.rootUrl}/admin/delete/${params.id}`,
      {
        headers: new HttpHeaders({
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }),
        responseType: 'text' as 'json'
      }
    ).pipe(
      catchError(error => {
        console.error('Error deleting user:', error);
        return throwError(() => error);
      })
    );
  }

  getUserById(params: { id: number }): Observable<User> {
    const token = localStorage.getItem('token');
    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);
    return this.http.get<User>(`http://localhost:8081/api/v1/admin/${params.id}`, { headers });
  }

  logout(): void {
    localStorage.removeItem('token');
    localStorage.removeItem('currentUser');
  }

  getSafeProfilePicUrl(url: string | undefined): string {
    if (!url) {
      return 'assets/images/default-profile.png';
    }

    if (url.startsWith('http') || url.startsWith('data:')) {
      return url;
    }

    return `${environment.apiBaseUrl}/uploads/${url}`;
  }
}
